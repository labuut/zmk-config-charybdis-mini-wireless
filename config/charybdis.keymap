#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define U_TAPPING_TERM 200

#define LR_MAIN_EN  0
#define LR_MAIN_RU  1
#define LR_NUMS     2
#define LR_WILDS    3
#define LR_NAV      4
#define LR_SPEC     5
#define LR_SERV     6
#define AUTO_MOUSE  7
#define SCROLL      8



/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

/ {
    behaviors {
        // // NOTE: example, "LR_WILDS_WITH 0 TAB". 0 is dummy argument
        // // https://zmk.dev/docs/behaviors/hold-tap#using-different-behavior-types-with-hold-taps
        // LR_WILDS_WITH: LR_WILDS_WITH {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "LR_WILDS_WITH";
        //     #binding-cells = <2>;
        //     flavor = "hold-preferred";
        //     tapping-term-ms = <150>;
        //     // bindings = <hold>, <tap>;
        //     bindings = <&WILDS_RU>, <&kp>;
        // };

        // cmt - custom mod-tap
        cmt: cmt {
            compatible = "zmk,behavior-hold-tap";
            label = "custom-mod-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            // bindings = <hold>, <tap>;
            bindings = <&kp>, <&kp>;
        };

        EN_RU: EN_RU {
            compatible = "zmk,behavior-mod-morph";
            label = "EN_RU";
            #binding-cells = <0>;
            bindings = <&TO_MAIN_EN>, <&TO_MAIN_RU>;
            mods = <(MOD_LCTL)>;
        };
        
        DOT_RU: DOT_RU {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_RU";
            #binding-cells = <0>;
            bindings = <&mt DOT FSLH>, <&kp DOT>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };
        
        COMMA_RU: COMMA_RU {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_RU";
            #binding-cells = <0>;
            bindings = <&kp LS(FSLH)>, <&kp COMMA>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
            keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };
        
        FSLH_BSLH: FSLH_BSLH {
            compatible = "zmk,behavior-mod-morph";
            label = "FSLH_BSLH";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;
            mods = <(MOD_LSFT)>;
        };
        
        L_PAR_BRC_BKT: L_PAR_BRC_BKT {
            compatible = "zmk,behavior-mod-morph";
            label = "L_PAR_BRC_BKT";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&cmt LBKT LBRC>;
            mods = <(MOD_LSFT)>;
        };
        
        R_PAR_BRC_BKT: R_PAR_BRC_BKT {
            compatible = "zmk,behavior-mod-morph";
            label = "R_PAR_BRC_BKT";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&cmt RBKT RBRC>;
            mods = <(MOD_LSFT)>;
        };

        // u_mt: u_mt {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "u_mt";
        //     #binding-cells = <2>;
        //     tapping_term_ms = <U_TAPPING_TERM>;
        //     flavor = "tap-preferred";
        //     bindings = <&kp>, <&kp>;
        // };

        // u_lt: u_lt {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "u_lt";
        //     #binding-cells = <2>;
        //     tapping_term_ms = <U_TAPPING_TERM>;
        //     flavor = "tap-preferred";
        //     bindings = <&mo>, <&kp>;
        // };

        // Shift_Enter: Shift_Enter {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "SHIFT_ENTER";
        //     bindings = <&kp>, <&kp>;

        //     #binding-cells = <2>;
        //     hold-trigger-key-positions = <40>;
        //     tapping-term-ms = <100>;
        // };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = 
                <&out OUT_BLE>,
                <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&out OUT_BLE>,
                <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&out OUT_BLE>,
                <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&out OUT_BLE>,
                <&bt BT_SEL 3>;
        };

        LAYOUT_EN: LAYOUT_EN {
            label = "ZM_LAYOUT_EN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <30>;
            bindings =
                <&kp LA(LS(N8))>; // <&kp CAPS>;
        };

        LAYOUT_RU: LAYOUT_RU {
            label = "ZM_LAYOUT_RU";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <30>;
            bindings =
                <&kp LA(LS(N9))>; // <&kp LS(CAPS)>;
        };

        TO_MAIN_EN: TO_MAIN_EN {
            label = "ZM_TO_MAIN_EN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <30>;
            bindings =
                <&LAYOUT_EN>,
                <&to LR_MAIN_EN>;
            };

        TO_MAIN_RU: TO_MAIN_RU {
            label = "ZM_TO_MAIN_RU";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <30>;
            bindings =
                <&LAYOUT_RU>,
                <&to LR_MAIN_RU>;
        };

        WILDS_RU: WILDS_RU {
            label = "ZM_WILDS_RU";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <30>;
            bindings =
                <&LAYOUT_EN>,
                <&to LR_WILDS>,
                <&macro_pause_for_release>,
                <&to LR_MAIN_RU>,
                <&LAYOUT_RU>;
        };

        NUMBER_RU: NUMBER_RU {
            label = "ZM_NUMBER_RU";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <30>;
            bindings =
                <&LAYOUT_RU>,
                <&kp LS(N3)>,
                <&LAYOUT_EN>;
        };

        SRVC_TEST: SRVC_TEST {
            label = "ZM_SRVC_TEST";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <30>;
            bindings =
                <&kp S>,<&kp E>,<&kp R>,<&kp V>,<&kp I>,<&kp C>,<&kp E>;
        };        
    };

    combos {
        compatible = "zmk,combos";

        /*
            Indexes start from 0. 
            Indexes by first switch in rows: 0, 12, 24, 36.
        */

        // EN/RU layout: K + L
        switch_lang {
            timeout-ms = <50>;
            key-positions = <20 21>;
            layers = <LR_MAIN_EN LR_MAIN_RU>; 
            bindings = <&EN_RU>;
        };
        // LR_SERV. Left half: top left (Esc) + all left thumb
        to_serv_left {
            timeout-ms = <100>;
            key-positions = <0 36 37 38>;
            layers = <LR_MAIN_EN LR_MAIN_RU>; 
            bindings = <&to LR_SERV>;
        };
        // LR_SERV. Right half: top right (rus 'Ð¥') + all right thumb
        to_serv_right {
            timeout-ms = <100>;
            key-positions = <11 39 40>;
            layers = <LR_MAIN_EN LR_MAIN_RU>; 
            bindings = <&to LR_SERV>;
        };

        LeftClickRight {
            bindings = <&mkp LCLK>;
            key-positions = <31 32>;
        };

        RightClickRight {
            bindings = <&mkp RCLK>;
            key-positions = <32 33>;
        };

        MiddleClickRight {
            bindings = <&mkp MCLK>;
            key-positions = <31 33>;
        };

        // ParaLeft {
        //     bindings = <&kp LEFT_PARENTHESIS>;
        //     key-positions = <4 16>;
        // };

        // ParaRight {
        //     bindings = <&kp RIGHT_PARENTHESIS>;
        //     key-positions = <7 19>;
        // };

        // BrakLeft {
        //     bindings = <&kp LEFT_BRACKET>;
        //     key-positions = <3 15>;
        // };

        // BrakRight {
        //     bindings = <&kp RIGHT_BRACKET>;
        //     key-positions = <8 20>;
        // };

        // BraceLeft {
        //     bindings = <&kp LEFT_BRACE>;
        //     key-positions = <2 14>;
        // };

        // BraceRight {
        //     bindings = <&kp RIGHT_BRACE>;
        //     key-positions = <9 21>;
        // };

        // Delete {
        //     bindings = <&kp DELETE>;
        //     key-positions = <8 9>;
        // };

        // CapsWord {
        //     bindings = <&caps_word>;
        //     key-positions = <17 18>;
        // };
    };

    keymap {
        compatible = "zmk,keymap";

        /*
            |  TAB  |  Q  |  W  |  E   |  R   |  T   |      |  Y   |   U   |   I   |  O   |   P   |   \  |
            |  ESC  |  A  |  S  |  D   |  F   |  G   |      |  H   |   J   |   K   |  L   |   ;   |   '  |
            |   `   |  Z  |  X  |  C   |  V   |  B   |      |  N   |   M   |   ,   |  .   |   /   | PGUP |
                                | END  | LEFT | RIGHT|      | BSPC |  DEL  | LALT  |
        */

        LR_MAIN_EN {
            bindings = <
                // row 1
                &kp ESC        &kp Q   &kp W   &kp E   &kp R   &kp T            &kp Y   &kp U   &kp I   &kp O   &kp P       &none
                // row 2
                &mt LWIN TAB   &kp A   &kp S   &kp D   &kp F   &kp G            &kp H   &kp J   &kp K   &kp L   &none       &kp BSPC
                // row 3
                &kp LCTRL      &lt SCROLL Z   &kp X   &kp C   &kp V   &kp B            &kp N   &kp M   &none   &none   &kp COMMA   &kp DOT
                // thumb row
                &mt LALT ENTER   &kp LSHFT   &lt LR_NUMS SPACE                  &lt LR_NAV SPACE   &mo LR_WILDS
            >;
        };

        LR_MAIN_RU {
            bindings = <
                // row 1
                &trans   &kp Q   &kp W   &kp E   &kp R   &cmt GRAVE T            &kp Y   &kp U          &kp I       &kp O     &kp P       &kp LBKT
                // row 2
                &trans   &kp A   &kp S   &kp D   &kp F   &kp G                   &kp H   &cmt SQT J     &kp K       &kp L     &kp SEMI    &trans
                // row 3
                &trans   &kp Z   &kp X   &kp C   &kp V   &kp B                   &kp N   &cmt RBKT M    &kp COMMA   &kp DOT   &COMMA_RU   &DOT_RU
                // thumb row
                &trans   &trans   &trans                                         &trans   &WILDS_RU
            >;
        };
    
        LR_NUMS {
            bindings = <
                // row 1
                &trans   &none   &kp F7   &kp F8   &kp F9   &kp F10            &none   &kp N7   &kp N8   &kp N9   &none    &none
                // row 2
                &trans   &none   &kp F4   &kp F5   &kp F6   &kp F11            &none   &kp N4   &kp N5   &kp N6   &kp N0   &trans
                // row 3
                &trans   &none   &kp F1   &kp F2   &kp F3   &kp F12            &none   &kp N1   &kp N2   &kp N3   &trans   &trans
                // thumb row
                &trans   &trans   &trans                                       &trans   &trans
            >;
        };
    
        LR_WILDS {
            bindings = <
                // row 1
                &kp GRAVE   &NUMBER_RU   &kp HASH   &kp PIPE   &kp AMPS    &kp CARET            &kp PRCNT   &FSLH_BSLH       &kp ASTRK        &kp SQT     &kp DQT    &none
                // row 2
                &trans      &none        &kp AT     &kp EXCL   &kp QMARK   &none                &kp EQUAL   &kp MINUS        &kp PLUS         &kp COLON   &kp SEMI   &trans
                // row 3
                &trans      &none        &kp DLLR   &none      &none       &none                &none       &L_PAR_BRC_BKT   &R_PAR_BRC_BKT   &kp LT      &kp GT     &trans
                // thumb row
                &trans   &trans   &trans                                                        &trans   &trans
            >;
        };
    
        LR_NAV {
            bindings = <
                // row 1
                &trans   &trans   &trans    &trans    &trans   &trans            &kp PG_UP   &kp HOME   &kp UP     &kp END     &kp C_NEXT   &kp K_APP
                // row 2
                &trans   &trans   &trans    &trans    &trans   &trans            &kp PG_DN   &kp LEFT   &kp DOWN   &kp RIGHT   &kp C_PREV   &trans
                // row 3
                &trans   &trans   &trans    &trans    &trans   &trans            &none       &none      &none      &trans      &trans       &trans
                // thumb row
                &trans   &trans   &trans                                         &trans   &trans
            >;
        };
    
        LR_SPEC {
            bindings = <
                // row 1
                &trans   &none   &none   &none   &none   &none            &none   &kp C_PP     &kp C_PREV     &kp C_NEXT     &none   &kp DEL
                // row 2
                &trans   &none   &none   &none   &none   &none            &none   &kp C_MUTE   &kp C_VOL_DN   &kp C_VOL_UP   &none   &none
                // row 3
                &trans   &none   &none   &none   &none   &none            &none   &none        &kp C_BRI_DN   &kp C_BRI_UP   &none   &kp PSCRN
                // thumb row
                &trans   &trans   &trans                                  &trans   &trans
            >;
        };

        LR_SERV {
            bindings = <
                // row 1
                &to LR_MAIN_EN   &none   &none   &none   &none   &bootloader            &bootloader   &none   &none   &none   &none          &to LR_MAIN_EN
                // row 2
                &none            &none   &none   &none   &none   &sys_reset             &sys_reset    &none   &none   &none   &none          &none
                // row 3
                &none            &none   &none   &none   &none   &SRVC_TEST             &SRVC_TEST    &bt_0   &bt_1   &bt_2   &out OUT_USB   &bt BT_CLR 
                // thumb row
                &trans   &trans   &trans                                                &trans   &trans
            >;
        };

        AUTO-MOUSE {
            bindings = <
                &trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
                                        &mkp LCLK  &trans  &mkp RCLK    &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
                &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};

// BASE {
//     bindings = <
//         &kp ESC  &kp Q             &kp W             &kp E          &kp R               &kp T    &kp Y  &kp U               &kp I          &kp O              &kp P                 &kp BSPC
//         &kp TAB  &u_mt LEFT_GUI A  &u_mt LEFT_ALT S  &u_mt LCTRL D  &u_mt LEFT_SHIFT F  &kp G    &kp H  &u_mt LEFT_SHIFT J  &u_mt RCTRL K  &u_mt RIGHT_ALT L  &u_mt RIGHT_GUI SEMI  &kp APOS
//         &mo 5    &kp Z             &kp X             &kp C          &kp V               &kp B    &kp N  &kp M               &kp COMMA      &kp DOT            &kp FSLH              &mo 5
//                                                                     &kp LGUI       &kp SPACE           &mo 1    &mo 2  &kp RET
//     >;
// };

// NAV {
//     bindings = <
//         &trans  &trans    &kp UP    &trans     &trans  &trans    &kp N7           &kp N8                &kp N9          &kp N0  &kp HOME  &kp F1
//         &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans    &kp N4           &u_mt RIGHT_SHIFT N5  &u_mt RCTRL N6  &trans  &trans    &kp F10
//         &trans  &trans    &trans    &trans     &trans  &trans    &kp N1           &kp N2                &kp N3          &trans  &trans    &kp F20
//                                     &trans     &trans  &trans    &lt 3 BACKSPACE  &kp LSHFT
//     >;
// };

// SYMNUM {
//     bindings = <
//         &bt BT_CLR  &kp EXCL      &kp AT       &kp HASH    &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS                 &kp KP_MULTIPLY   &kp LPAR              &kp RPAR              &kp DEL
//         &trans      &trans        &bt BT_PRV   &bt BT_NXT  &trans    &trans       &kp UNDER  &u_mt RIGHT_SHIFT EQUAL  &u_mt RCTRL LBKT  &u_mt RIGHT_ALT RBKT  &u_mt RIGHT_GUI BSLH  &kp GRAVE
//         &trans      &out OUT_TOG  &bootloader  &trans      &trans    &trans       &kp MINUS  &kp PLUS                 &kp LBRC          &kp RBRC              &kp PIPE              &kp TILDE
//                                             &trans      &trans    &mo 3        &trans     &trans
//     >;
// };

// FUN {
//     bindings = <
//         &trans  &trans   &kp F1  &kp F2   &kp F3   &kp F4     &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4  &bt BT_CLR
//         &trans  &kp DEL  &kp F5  &kp F6   &kp F7   &kp F8     &out OUT_TOG  &kp K_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE    &kp LALT
//         &trans  &trans   &kp F9  &kp F10  &kp F11  &kp F12    &trans        &trans            &trans             &trans           &trans        &to 0
//                                 &trans   &trans   &trans     &trans        &trans
//     >;
// };

// AUTO-MOUSE {
//     bindings = <
//         &trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
//         &trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
//         &trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
//                                 &mkp LCLK  &trans  &mkp RCLK    &trans  &trans
//     >;
// };

// SCROLL {
//     bindings = <
//         &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
//         &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
//         &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
//                                 &trans  &trans  &trans    &trans  &trans
//     >;
// };